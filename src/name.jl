# Name data is generated by 疑似個人情報データ生成サービス (https://hogehoge.tk/personal/)
export Japanese, FirstName, LastName, name

const sei = readdlm(joinpath(@__DIR__, "data" ,"sei.csv"), ',', header=true)[1]
const numsei = size(sei)[1]
const na = readdlm(joinpath(@__DIR__, "data", "na.csv"), ',', header=true)[1]
const numna = size(na)[1]

mutable struct LastName
    kanji::String
    hiragana::String
    katakana::String
end

mutable struct FirstName
    kanji::String
    hiragana::String
    katakana::String
end

mutable struct Japanese
    lastname::LastName
    firstname::FirstName
    sex::String
end


function rand(rng::AbstractRNG, ::Random.SamplerType{Japanese})
    naidx = rand(rng, 1:numna)
    seiidx = rand(rng, 1:numsei)
    firstname = FirstName(na[naidx,1:3]...)
    lastname = LastName(sei[seiidx,:]...)
    sex = na[naidx, 4]
    return Japanese(lastname, firstname, sex)
end
function rand(rng::AbstractRNG, ::Random.SamplerType{LastName})
    seiidx = rand(rng, 1:numsei)
    lastname = LastName(sei[seiidx,:]...)

    return lastname
end
function rand(rng::AbstractRNG, ::Random.SamplerType{FirstName})
    naidx = rand(rng, 1:numna)
    firstname = FirstName(na[naidx,1:3]...)

    return firstname
end

function show(io::IO, ::MIME"text/plain", p::Japanese)
    sep =  get(stdout, :sep, " ")
    lastname = p.lastname
    firstname = p.firstname
    println(io, "Japanese")
    println(io, " 性別 ", p.sex)
    println(io, " " * lastname.kanji * sep * firstname.kanji)
    println(io, " " * lastname.hiragana * sep * firstname.hiragana)
    print(io, " " * lastname.katakana * sep * firstname.katakana)
end

function firstname(;type=1)
    @assert type in [1,2,3]
    return na[rand(1:numna), type]
end
function firstname(x::Japanese; type=1)
    @assert type in [1,2,3]
    d = Dict(1=>:kanji, 2=>:hiragana, 3=>:katakana)
    return getproperty(x.firstname, d[type])
end

function lastname(;type=1)
    @assert type in [1,2,3]
    return sei[rand(1:numsei), type]
end
function lastname(x::Japanese; type=1)
    @assert type in [1,2,3]
    d = Dict(1=>:kanji, 2=>:hiragana, 3=>:katakana)
    return getproperty(x.lastname, d[type])
end

sex(x::Japanese) = x.sex

"""
    name(;sep=' ', type)

Generate a Japanese name.

# Arguments
## type
- 1 --> kanji
- 2 --> hiragana
- 3 --> katakana

# Examples
```julia-repl
julia> using FakerJP

julia> FakerJP.name()
"糸数 和夫"

julia> FakerJP.name(;sep="---") # default seperator is half width space
"井出---晃"

julia> FakerJP.name(;sep="---", type=1) # kanji
"谷合---譲"

julia> FakerJP.name(;sep="---", type=2) # hiragana
"ふじい---もとひろ"

julia> FakerJP.name(;sep="---", type=3) # katakana
"オミ---ミチコ"
```
"""
function name(;sep=' ', type=1)
    @assert type in [1,2,3]
    a = rand(1:numsei)
    b = rand(1:numna)
    return sei[a,type] * sep * na[b,type]
end
function name(x::Japanese; sep=' ', type=1)
    @assert type in [1,2,3]
    return lastname(x, type=type) * sep * firstname(x, type=type)
end
